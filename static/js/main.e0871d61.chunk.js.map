{"version":3,"sources":["components/AddTodo.js","redux/bollerplate.js","components/BottonsTodo.js","redux/action.js","components/Todo.js","components/FiltersTodo.js","components/TodoList.js","components/BtnControlls.js","App.js","reportWebVitals.js","redux/rootReducer.js","index.js"],"names":["AddTodo","props","type","onKeyUp","value","onChange","ADD","DELETE","UPDATE","SELECTED","DELETE_SELECTED","DONE_SELECTED","DONE","SELECTED_ALL","BottonsTodo","useState","dispatch","useDispatch","todo","id","text","changeValue","onClick","payload","doneTodo","deleteTodo","Todo","editable","currentValue","contentEdit","setContentEdit","e","prevState","target","selected","done","className","checked","selectTodo","htmlFor","updateTodo","FiltersTodo","changeFilter","disabled","TodoList","todos","children","filters","setFilters","checkedAll","setCheckedAll","length","filter","TodosFilter","map","i","BtnControlls","some","App","useSelector","state","todosList","setValue","key","trim","uuid","addTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initTodoState","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAEe,SAASA,EAASC,GAC7B,OAAO,uBAAOC,KAAK,OAAOC,QAASF,EAAME,QAASC,MAAOH,EAAMG,MAAOC,SAAUJ,EAAMI,W,kBCHpFC,EAAM,MACNC,EAAS,SACTC,EAAS,SACTC,EAAW,WACXC,EAAkB,kBAClBC,EAAgB,gBAChBC,EAAO,OACPC,EAAe,e,QCHN,SAASC,EAAcb,GAAS,IAAD,EAClBc,oBAAS,GADS,mBAEpCC,GAFoC,UAEzBC,eAFyB,EAGRhB,EAAMiB,KAAhCC,EAHkC,EAGlCA,GAHkC,EAG9BC,KAH8B,EAGxBC,YAClB,OACI,qCAEI,wBAAQC,QAAS,kBAAMN,EC2BX,SAACG,GAAD,MAAS,CAC7BjB,KAAMU,EACNW,QAAS,CACLJ,OD9BoCK,CAASL,KAAzC,kBACA,wBAAQG,QAAS,kBAAMN,ECmBT,SAACG,GAAD,MAAS,CAC/BjB,KAAMK,EACNgB,QAAS,CACLJ,ODtBoCM,CAAWN,KAA3C,uBENG,SAASO,EAAT,GAAwB,IAARR,EAAO,EAAPA,KACrBF,EAAWC,cADiB,EAEIF,mBAAS,CAC3CY,UAAU,EACVC,aAAcV,EAAKE,OAJW,mBAE3BS,EAF2B,KAEdC,EAFc,KAM5BT,EAAc,SAACU,GACZF,EAAYF,UACbG,GAAe,SAAAE,GAAS,kCACjBA,GADiB,IAEpBL,UAAU,EACVC,aAAcG,EAAEE,OAAO7B,YAI3B8B,EAA6BhB,EAA7BgB,SAAUC,EAAmBjB,EAAnBiB,KAAMf,EAAaF,EAAbE,KAAMD,EAAOD,EAAPC,GAE9B,OACI,qBAAIiB,UAAW,kBAAf,UACI,uBACIjB,GAAE,gBAAWA,GACbjB,KAAK,WACLmC,QAASH,EACT7B,SAAU,WACNW,EDRM,SAACG,GAAD,MAAS,CAC/BjB,KAAMO,EACNc,QAAS,CACLJ,OCKqBmB,CAAWnB,OAI5B,uBAAOoB,QAAO,gBAAWpB,GAAzB,SAESgB,EAEG,sBAAMC,UAAU,mBAAhB,SAAoChB,IADpC,uBAAOgB,UAAU,cAAclC,KAAK,OAAOoB,QAASD,EAAajB,MAAOgB,EAAMf,SAAU,SAAC0B,GAAD,OAAOf,EDvB7F,SAACG,EAAIf,GAAL,MAAgB,CACtCF,KAAMM,EACNe,QAAS,CACLJ,KACAC,KAAMhB,ICmBkHoC,CAAWrB,EAAIY,EAAEE,OAAO7B,aAMhJ,cAACU,EAAD,CAAaI,KAAMA,EAAMG,YAAaA,OCzC/B,SAASoB,EAAT,GAA8C,IAAvBC,EAAsB,EAAtBA,aAActC,EAAQ,EAARA,MAEhD,OACI,qBAAIgC,UAAW,kBAAf,UACI,wBAAQA,UAAU,eAAeO,SAAoB,SAAVvC,EAAkBkB,QAAS,kBAAIoB,EAAa,SAAvF,kBACA,wBAAQN,UAAU,eAAeO,SAAoB,aAAVvC,EAAsBkB,QAAS,kBAAIoB,EAAa,aAA3F,sBACA,wBAAQN,UAAU,eAAeO,SAAoB,KAAVvC,EAAckB,QAAS,kBAAIoB,EAAa,KAAnF,oBCFG,SAASE,EAAT,GAAuC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SAChC9B,EAAWC,cADgC,EAEnBF,mBAAS,IAFU,mBAE1CgC,EAF0C,KAEjCC,EAFiC,OAGbjC,oBAAS,GAHI,mBAG1CkC,EAH0C,KAG9BC,EAH8B,KAWjD,OAAKL,EAAMM,OAKP,mCACI,qBAAIf,UAAW,YAAf,UARY,SAACS,GAAD,IAAQO,EAAR,uDAAe,GAAf,MAAiC,KAAXA,EAAgBP,EAAQA,EAAMO,QAAO,SAAAlC,GAAI,OAAIA,EAAKkC,MAU5EC,CAAYR,EAAOE,GAASO,KAAI,SAACpC,EAAMqC,GAAP,OAAa,cAAC7B,EAAD,CAAMR,KAAMA,GAAWqC,MAExE,oBAAInB,UAAW,kBAAf,SACI,kCACI,uBACIlC,KAAK,WACLmC,QAASY,EACT5C,SAtBT,WACXW,EHkBmC,CAACd,KAAMW,EAAcU,QGlBjC0B,IACvBC,GAAeD,MAgBH,kBASJ,cAACR,EAAD,CAAcC,aAvBL,SAACU,GAAD,OAAYJ,EAAWI,IAuBUhD,MAAO2C,SAnBlD,4BAAID,ICdJ,SAASU,EAAT,GAAiC,IAATX,EAAQ,EAARA,MAC7B7B,EAAWC,cAEjB,OAAI4B,EAAMY,MAAK,SAAAvC,GAAI,OAAEA,EAAKgB,YAElB,qCACI,wBAAQZ,QAAS,kBAAMN,EJmCE,CACrCd,KAAMQ,KIpCM,oBACA,wBAAQY,QAAS,kBAAMN,EJsCA,CACnCd,KAAMS,KIvCM,qBAIL,KC0BI+C,MAhCf,WACE,IAAM1C,EAAWC,cACX4B,EAAQc,aAAY,SAAAC,GAAK,OAAIA,EAAMf,MAAMgB,aAFlC,EAIa9C,mBAAS,IAJtB,mBAINX,EAJM,KAIC0D,EAJD,KAiBb,OACE,sBAAK1B,UAAU,MAAf,UACE,cAACpC,EAAD,CAASI,MAAOA,EAAOC,SAdZ,SAAC0B,GACd+B,EAAS/B,EAAEE,OAAO7B,QAayBD,QAX7B,SAAC4B,GACD,UAAVA,EAAEgC,KAAmBhC,EAAEE,OAAO7B,MAAM4D,SACtChD,ELfiB,SAACZ,GAAD,MAAY,CAC/BF,KAAMI,EACNiB,QAAS,CACLJ,GAAI8C,cACJ7C,KAAMhB,EACN8B,UAAU,EACVC,MAAM,IKSC+B,CAAQ9D,IACjB0D,EAAS,QAST,cAACN,EAAD,CAAcX,MAAOA,IACrB,cAACD,EAAD,CACIC,MAAOA,EACPpB,WATW,SAAbA,EAAcN,GAAD,OAAQH,EAASS,EAAWN,KAUvCqB,WATW,SAAbA,EAAcrB,EAAIC,GAAL,OAAcJ,EAASwB,EAAWrB,EAAIC,KAMrD,yBClBS+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,eCDRQ,EAAgB,CAClBf,UAAW,IAGFgB,EAAcC,0BAAgB,CACvCjC,MAGJ,WAAuD,IAAjCe,EAAgC,uDAAxBgB,EAAeG,EAAS,uCAClD,OAAQA,EAAO7E,MACX,KAAKI,EACD,OAAO,YAAC,eACDsD,GADP,IAEIC,UAAU,GAAD,mBAAMD,EAAMC,WAAZ,CAAuBkB,EAAOxD,YAE/C,KAAKf,EACD,OAAO,YAAC,eACDoD,GADP,IAEIC,UAAWD,EAAMC,UAAUP,KAAI,SAAApC,GAC3B,OAAIA,EAAKC,KAAO4D,EAAOxD,QAAQJ,GACpB,2BACAD,GADP,IAEIE,KAAM2D,EAAOxD,QAAQH,OAGlBF,OAIvB,KAAKT,EACD,OAAO,2BACAmD,GADP,IAEIC,UAAWD,EAAMC,UAAUP,KAAI,SAAApC,GAAI,OAAIA,EAAKC,KAAO4D,EAAOxD,QAAQJ,GAAKD,EAAhC,2BAChCA,GADgC,IAEnCgB,UAAWhB,EAAKgB,gBAG5B,KAAKrB,EACD,OAAKkE,EAAOxD,QAMD,2BACAqC,GADP,IAEIC,UAAWD,EAAMC,UAAUP,KAAI,SAAApC,GAAI,OAAKA,EAAKgB,SAAN,2BAA4BhB,GAA5B,IAAkCgB,UAAU,IAA3BhB,OAPrD,2BACA0C,GADP,IAEIC,UAAWD,EAAMC,UAAUP,KAAI,SAAApC,GAAI,OAAIA,EAAKgB,SAAWhB,EAAhB,2BAA2BA,GAA3B,IAAiCgB,UAAU,SAU9F,KAAK3B,EACD,OAAO,2BACAqD,GADP,IAEIC,UAAWD,EAAMC,UAAUT,QAAO,SAAAlC,GAAI,OAAIA,EAAKC,KAAO4D,EAAOxD,QAAQJ,QAE7E,KAAKP,EACD,OAAO,2BACAgD,GADP,IAEIC,UAAWD,EAAMC,UAAUP,KAAI,SAAApC,GAAI,OAAIA,EAAKC,KAAO4D,EAAOxD,QAAQJ,GAA3B,2BAChCD,GADgC,IAEnCiB,MAAM,IACNjB,OAEZ,KAAKR,EACD,OAAO,2BACAkD,GADP,IAEIC,UAAWD,EAAMC,UAAUT,QAAO,SAAAlC,GAAI,OAAKA,EAAKgB,cAExD,KAAKvB,EACD,OAAO,2BACAiD,GADP,IAEIC,UAAWD,EAAMC,UAAUP,KAAI,SAAApC,GAAI,OAAKA,EAAKgB,SAAN,2BAA4BhB,GAA5B,IAAkCiB,MAAM,IAAvBjB,OAEhE,QACI,OAAO0C,M,oBCtEboB,EAAQC,sBAAYJ,EAAaK,8BAAoBC,0BAAgBC,OAC3EC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGNQ,SAASC,eAAe,SAM1BtB,M","file":"static/js/main.e0871d61.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function AddTodo (props) {\n    return <input type=\"text\" onKeyUp={props.onKeyUp} value={props.value} onChange={props.onChange}/>\n}","const ADD = 'ADD'\nconst DELETE = 'DELETE'\nconst UPDATE = 'UPDATE'\nconst SELECTED = 'SELECTED'\nconst DELETE_SELECTED = 'DELETE_SELECTED'\nconst DONE_SELECTED = 'DONE_SELECTED'\nconst DONE = 'DONE'\nconst SELECTED_ALL = 'SELECTED_ALL'\n// const DONE_FILTER = 'DONE_FILTER'\n\nexport {ADD, UPDATE, DELETE, SELECTED, SELECTED_ALL, DONE, DELETE_SELECTED, DONE_SELECTED}","import React, {useState} from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {deleteTodo, doneTodo, updateTodo} from \"../redux/action\";\n\nexport default function BottonsTodo ( props ) {\n    const [edit, setEdit] = useState(false)\n    const dispatch = useDispatch()\n    const { id, text, changeValue } = props.todo\n    return (\n        <>\n            {/*<button onClick={() => changeValue() }>{!edit ? 'edit' : 'save' }</button>*/}\n            <button onClick={() => dispatch(doneTodo(id)) }>done</button>\n            <button onClick={() => dispatch(deleteTodo(id)) }>delete</button>\n        </>\n    )\n}\n\n//dispatch(updateTodo(id, text)","import {ADD, DELETE, UPDATE, SELECTED, SELECTED_ALL, DONE, DELETE_SELECTED, DONE_SELECTED} from \"./bollerplate\";\nimport { v4 as uuid } from 'uuid'\n\n\nexport const addTodo = (value) => ({\n    type: ADD,\n    payload: {\n        id: uuid(),\n        text: value,\n        selected: false,\n        done: false\n    }\n})\n\nexport const updateTodo = (id, value) => ({\n    type: UPDATE,\n    payload: {\n        id,\n        text: value,\n    }\n})\n\nexport const selectTodo = (id) => ({\n    type: SELECTED,\n    payload: {\n        id,\n    }\n})\n\nexport const selectAllTodo = (checked) => ({type: SELECTED_ALL, payload: checked})\n\nexport const deleteTodo = (id) => ({\n    type: DELETE,\n    payload: {\n        id\n    }\n})\n\nexport const doneTodo = (id) => ({\n    type: DONE,\n    payload: {\n        id\n    }\n})\n\nexport const deleteTodoSelected = () => ({\n    type: DELETE_SELECTED,\n})\n\nexport const doneTodoSelected = () => ({\n    type: DONE_SELECTED,\n})\n\n","import React, { useState} from \"react\";\nimport BottonsTodo from \"./BottonsTodo\";\nimport {useDispatch} from \"react-redux\";\nimport {updateTodo, selectTodo} from \"../redux/action\";\n\n\nexport default function Todo ({todo}) {\n    const dispatch = useDispatch()\n    const [contentEdit, setContentEdit] = useState({\n        editable: false,\n        currentValue: todo.text\n    })\n    const changeValue = (e) => {\n        if (!contentEdit.editable) {\n            setContentEdit(prevState => ({\n                ...prevState,\n                editable: true,\n                currentValue: e.target.value\n            }))\n        }\n    }\n    const { selected, done, text, id } = todo\n\n    return (\n        <li className={\"todo-list__item\"}>\n            <input\n                id={`check_${id}`}\n                type=\"checkbox\"\n                checked={selected}\n                onChange={()=> {\n                    dispatch(selectTodo(id))\n                }}\n\n            />\n            <label htmlFor={`check_${id}`}>\n                {\n                    !done ?\n                        <input className=\"todo__title\" type='text' onClick={changeValue} value={text} onChange={(e) => dispatch(updateTodo(id, e.target.value))} /> :\n                        <span className=\"todo__title done\">{text}</span>\n                }\n            </label>\n\n\n        <BottonsTodo todo={todo} changeValue={changeValue} />\n    </li>\n    )\n}\n//","import React from \"react\";\n\nexport default function FiltersTodo ({changeFilter, value}) {\n\n    return (\n        <li className={\"todo-list__item\"}>\n            <button className=\"filters__btn\" disabled={value === 'done'} onClick={()=>changeFilter('done')}>done</button>\n            <button className=\"filters__btn\" disabled={value === 'selected'} onClick={()=>changeFilter('selected')}>selected</button>\n            <button className=\"filters__btn\" disabled={value === ''} onClick={()=>changeFilter('')}>all</button>\n            {/*<button className=\"todo-filters__btn\"></button>*/}\n            {/*<button className=\"todo-filters__btn\"></button>*/}\n        </li>\n    )\n}","import React, {useState} from \"react\";\nimport Todo from \"./Todo\";\nimport {selectAllTodo} from \"../redux/action\";\nimport {useDispatch} from \"react-redux\";\nimport FiltersTodo from \"./FiltersTodo\";\n\nexport default function TodoList ({todos, children}) {\n    const dispatch = useDispatch()\n    const [filters, setFilters] = useState('')\n    const [checkedAll, setCheckedAll] = useState(false)\n    const change = () => {\n        dispatch(selectAllTodo(checkedAll))\n        setCheckedAll(!checkedAll)\n    }\n    const changeFilter = (filter) => setFilters(filter)\n    const TodosFilter = (todos, filter='') => filter === '' ? todos : todos.filter(todo => todo[filter] )\n\n    if (!todos.length) {\n        return <p>{children}</p>\n    }\n\n    return (\n        <>\n            <ul className={\"todo-list\"}>\n                {\n                    TodosFilter(todos, filters).map((todo, i) => <Todo todo={todo} key={i} />)\n                }\n                <li className={\"todo-list__item\"}>\n                    <label>\n                        <input\n                            type=\"checkbox\"\n                            checked={checkedAll}\n                            onChange={change}\n                        />\n                        select all\n                    </label>\n                </li>\n                <FiltersTodo  changeFilter={changeFilter} value={filters} />\n            </ul>\n        </>\n    )\n}\n","import {useDispatch} from \"react-redux\";\nimport { deleteTodoSelected, doneTodoSelected } from \"../redux/action\";\n\n\nexport default function BtnControlls ({todos}) {\n    const dispatch = useDispatch()\n\n    if (todos.some(todo=>todo.selected)) {\n        return (\n            <>\n                <button onClick={() => dispatch(deleteTodoSelected())}>delete</button>\n                <button onClick={() => dispatch(doneTodoSelected())}>done</button>\n            </>\n        )\n    }\n    return null\n}","import './App.css';\nimport {useState} from \"react\";\nimport AddTodo from \"./components/AddTodo\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport TodoList from \"./components/TodoList\";\nimport {addTodo, updateTodo, deleteTodo} from \"./redux/action\";\nimport BtnControlls from './components/BtnControlls'\n\n\nfunction App() {\n  const dispatch = useDispatch()\n  const todos = useSelector(state => state.todos.todosList)\n  // const dispatch = useDispatch()\n  const [value, setValue] = useState('')\n  const change = (e) => {\n    setValue(e.target.value)\n  }\n  const onKeyUp = (e) => {\n    if (e.key === 'Enter' && e.target.value.trim()) {\n      dispatch(addTodo(value))\n      setValue('')\n    }\n  }\n  const deleteTodo = (id) => dispatch(deleteTodo(id))\n  const updateTodo = (id, text) => dispatch(updateTodo(id, text))\n\n  return (\n    <div className=\"App\">\n      <AddTodo value={value} onChange={change} onKeyUp={onKeyUp} />\n      <BtnControlls todos={todos} />\n      <TodoList\n          todos={todos}\n          deleteTodo={deleteTodo}\n          updateTodo={updateTodo}\n      >\n        no todo\n      </TodoList>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers} from \"redux\";\nimport {ADD, UPDATE, DELETE, SELECTED, SELECTED_ALL, DONE, DELETE_SELECTED, DONE_SELECTED } from \"./bollerplate\";\n\n// function initialState() {\n//     return {todos: []}\n// }\nconst initTodoState = {\n    todosList: [] //{id: 1, todo: \"dasdas\", selected: false, done: false, filtersVisible: true}\n};\n\nexport const rootReducer = combineReducers({\n    todos: todoReducer,\n})\n\nfunction todoReducer (state = initTodoState, action ) {\n    switch (action.type) {\n        case ADD:\n            return ({\n                ...state,\n                todosList: [...state.todosList, action.payload]\n            })\n        case UPDATE:\n            return ({\n                ...state,\n                todosList: state.todosList.map(todo=> {\n                    if (todo.id === action.payload.id) {\n                        return {\n                            ...todo,\n                            text: action.payload.text\n                        }\n                    } else {\n                        return todo\n                    }\n                })\n            })\n        case SELECTED:\n            return {\n                ...state,\n                todosList: state.todosList.map(todo => todo.id !== action.payload.id ? todo : {\n                    ...todo,\n                    selected: !todo.selected\n                })\n            }\n        case SELECTED_ALL: {\n            if (!action.payload) {\n                return {\n                    ...state,\n                    todosList: state.todosList.map(todo => todo.selected ? todo : {...todo, selected: true})\n                }\n            } else {\n                return {\n                    ...state,\n                    todosList: state.todosList.map(todo => !todo.selected ? todo : {...todo, selected: false})\n                }\n            }\n        }\n\n        case DELETE:\n            return {\n                ...state,\n                todosList: state.todosList.filter(todo => todo.id !== action.payload.id)\n            }\n        case DONE:\n            return {\n                ...state,\n                todosList: state.todosList.map(todo => todo.id === action.payload.id ? {\n                    ...todo,\n                    done: true\n                } : todo)\n            }\n        case DELETE_SELECTED:\n            return {\n                ...state,\n                todosList: state.todosList.filter(todo => !todo.selected)\n            }\n        case DONE_SELECTED:\n            return {\n                ...state,\n                todosList: state.todosList.map(todo => !todo.selected ? todo : {...todo, done: true})\n            }\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {applyMiddleware, createStore} from \"redux\";\nimport {Provider} from \"react-redux\";\nimport {rootReducer} from \"./redux/rootReducer\";\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}